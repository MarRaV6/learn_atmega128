
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000082e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800100  00800100  0000082e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000082e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000860  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fbb  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000926  00000000  00000000  000018b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000493  00000000  00000000  000021dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00002670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000591  00000000  00000000  00002730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a0  00000000  00000000  00002cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00003361  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea eb       	ldi	r30, 0xBA	; 186
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 32       	cpi	r26, 0x22	; 34
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c5 d0       	rcall	.+394    	; 0x24e <main>
  c4:	78 c3       	rjmp	.+1776   	; 0x7b6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <_Z7lcd_comh>:

//------------------------------------------------------------------------------------------------------------------
//Функция записи команды в LCD
void lcd_com(unsigned char p)					// 'p' байт команды
{
	LCD_PORT &= ~(1 << RS);						// RS = 0 (запись команд)
  c8:	aa 98       	cbi	0x15, 2	; 21
	LCD_PORT |= (1 << EN);						// EN = 1 (начало записи команды в LCD)
  ca:	ab 9a       	sbi	0x15, 3	; 21
	LCD_PORT &= 0x0F; LCD_PORT |= (p & 0xF0);	// старший ниббл
  cc:	95 b3       	in	r25, 0x15	; 21
  ce:	9f 70       	andi	r25, 0x0F	; 15
  d0:	95 bb       	out	0x15, r25	; 21
  d2:	95 b3       	in	r25, 0x15	; 21
  d4:	28 2f       	mov	r18, r24
  d6:	20 7f       	andi	r18, 0xF0	; 240
  d8:	92 2b       	or	r25, r18
  da:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	e3 ec       	ldi	r30, 0xC3	; 195
  de:	f9 e0       	ldi	r31, 0x09	; 9
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <_Z7lcd_comh+0x18>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <_Z7lcd_comh+0x1e>
  e6:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1 << EN);						// EN = 0 (конец записи команды в LCD)
  e8:	ab 98       	cbi	0x15, 3	; 21
  ea:	e3 ec       	ldi	r30, 0xC3	; 195
  ec:	f9 e0       	ldi	r31, 0x09	; 9
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <_Z7lcd_comh+0x26>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <_Z7lcd_comh+0x2c>
  f4:	00 00       	nop
	_delay_ms(1);
	LCD_PORT |= (1 << EN);						// EN = 1 (начало записи команды в LCD)
  f6:	ab 9a       	sbi	0x15, 3	; 21
	LCD_PORT &= 0x0F; LCD_PORT |= (p << 4);		// младший ниббл
  f8:	95 b3       	in	r25, 0x15	; 21
  fa:	9f 70       	andi	r25, 0x0F	; 15
  fc:	95 bb       	out	0x15, r25	; 21
  fe:	25 b3       	in	r18, 0x15	; 21
 100:	f0 e1       	ldi	r31, 0x10	; 16
 102:	8f 9f       	mul	r24, r31
 104:	c0 01       	movw	r24, r0
 106:	11 24       	eor	r1, r1
 108:	82 2b       	or	r24, r18
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	83 ec       	ldi	r24, 0xC3	; 195
 10e:	99 e0       	ldi	r25, 0x09	; 9
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <_Z7lcd_comh+0x48>
 114:	00 c0       	rjmp	.+0      	; 0x116 <_Z7lcd_comh+0x4e>
 116:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1 << EN);						// EN = 0 (конец записи команды в LCD)
 118:	ab 98       	cbi	0x15, 3	; 21
 11a:	e3 ec       	ldi	r30, 0xC3	; 195
 11c:	f9 e0       	ldi	r31, 0x09	; 9
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <_Z7lcd_comh+0x56>
 122:	00 c0       	rjmp	.+0      	; 0x124 <_Z7lcd_comh+0x5c>
 124:	00 00       	nop
 126:	08 95       	ret

00000128 <_Z7lcd_dath>:


//Функция записи данных в LCD
void lcd_dat(unsigned char p)					// 'p' байт данных
{
	LCD_PORT |= (1 << RS)|(1 << EN);			// RS = 1 (запись данных), EN - 1 (начало записи команды в LCD)
 128:	95 b3       	in	r25, 0x15	; 21
 12a:	9c 60       	ori	r25, 0x0C	; 12
 12c:	95 bb       	out	0x15, r25	; 21
	LCD_PORT &= 0x0F; LCD_PORT |= (p & 0xF0);	// старший ниббл
 12e:	95 b3       	in	r25, 0x15	; 21
 130:	9f 70       	andi	r25, 0x0F	; 15
 132:	95 bb       	out	0x15, r25	; 21
 134:	95 b3       	in	r25, 0x15	; 21
 136:	28 2f       	mov	r18, r24
 138:	20 7f       	andi	r18, 0xF0	; 240
 13a:	92 2b       	or	r25, r18
 13c:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	36 ea       	ldi	r19, 0xA6	; 166
 140:	3a 95       	dec	r19
 142:	f1 f7       	brne	.-4      	; 0x140 <_Z7lcd_dath+0x18>
 144:	00 c0       	rjmp	.+0      	; 0x146 <_Z7lcd_dath+0x1e>
	_delay_us(50);
	LCD_PORT &= ~(1 << EN);						// EN = 0 (конец записи команды в LCD)
 146:	ab 98       	cbi	0x15, 3	; 21
 148:	96 ea       	ldi	r25, 0xA6	; 166
 14a:	9a 95       	dec	r25
 14c:	f1 f7       	brne	.-4      	; 0x14a <_Z7lcd_dath+0x22>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <_Z7lcd_dath+0x28>
	_delay_us(50);
	LCD_PORT |= (1 << EN);						// EN = 1 (начало записи команды в LCD)
 150:	ab 9a       	sbi	0x15, 3	; 21
	LCD_PORT &= 0x0F; LCD_PORT |= (p << 4);		// младший ниббл
 152:	95 b3       	in	r25, 0x15	; 21
 154:	9f 70       	andi	r25, 0x0F	; 15
 156:	95 bb       	out	0x15, r25	; 21
 158:	25 b3       	in	r18, 0x15	; 21
 15a:	30 e1       	ldi	r19, 0x10	; 16
 15c:	83 9f       	mul	r24, r19
 15e:	c0 01       	movw	r24, r0
 160:	11 24       	eor	r1, r1
 162:	82 2b       	or	r24, r18
 164:	85 bb       	out	0x15, r24	; 21
 166:	86 ea       	ldi	r24, 0xA6	; 166
 168:	8a 95       	dec	r24
 16a:	f1 f7       	brne	.-4      	; 0x168 <_Z7lcd_dath+0x40>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <_Z7lcd_dath+0x46>
	_delay_us(50);
	LCD_PORT &= ~(1 << EN);						// EN = 0 (конец записи команды в LCD)
 16e:	ab 98       	cbi	0x15, 3	; 21
 170:	96 ea       	ldi	r25, 0xA6	; 166
 172:	9a 95       	dec	r25
 174:	f1 f7       	brne	.-4      	; 0x172 <_Z7lcd_dath+0x4a>
 176:	00 c0       	rjmp	.+0      	; 0x178 <_Z7lcd_dath+0x50>
 178:	08 95       	ret

0000017a <_Z9lcd_clearv>:
}

//Функция очистки дисплея
void lcd_clear(void)
{
	lcd_com(0x01);
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	a5 df       	rcall	.-182    	; 0xc8 <_Z7lcd_comh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	83 ec       	ldi	r24, 0xC3	; 195
 180:	99 e0       	ldi	r25, 0x09	; 9
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <_Z9lcd_clearv+0x8>
 186:	00 c0       	rjmp	.+0      	; 0x188 <_Z9lcd_clearv+0xe>
 188:	00 00       	nop
 18a:	08 95       	ret

0000018c <_Z8lcd_initv>:
}

//Функция инициализации LCD
void lcd_init(void)
{
	lcd_com(0x33);   //режим 8 бит, мигающий курсор
 18c:	83 e3       	ldi	r24, 0x33	; 51
 18e:	9c df       	rcall	.-200    	; 0xc8 <_Z7lcd_comh>
 190:	87 ea       	ldi	r24, 0xA7	; 167
 192:	91 e6       	ldi	r25, 0x61	; 97
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <_Z8lcd_initv+0x8>
 198:	00 c0       	rjmp	.+0      	; 0x19a <_Z8lcd_initv+0xe>
 19a:	00 00       	nop
	_delay_ms(10);
	lcd_com(0x32);   //режим 4 бит, мигающий курсор
 19c:	82 e3       	ldi	r24, 0x32	; 50
 19e:	94 df       	rcall	.-216    	; 0xc8 <_Z7lcd_comh>
 1a0:	83 ed       	ldi	r24, 0xD3	; 211
 1a2:	90 e3       	ldi	r25, 0x30	; 48
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <_Z8lcd_initv+0x18>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <_Z8lcd_initv+0x1e>
	_delay_ms(5);
	lcd_com(0x28);   // шина 4 бит, LCD - 2 строки
 1aa:	00 00       	nop
 1ac:	88 e2       	ldi	r24, 0x28	; 40
 1ae:	8c df       	rcall	.-232    	; 0xc8 <_Z7lcd_comh>
 1b0:	83 ed       	ldi	r24, 0xD3	; 211
 1b2:	90 e3       	ldi	r25, 0x30	; 48
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <_Z8lcd_initv+0x28>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <_Z8lcd_initv+0x2e>
	_delay_ms(5);
	lcd_com(0x08);   // полное выключение дисплея
 1ba:	00 00       	nop
 1bc:	88 e0       	ldi	r24, 0x08	; 8
 1be:	84 df       	rcall	.-248    	; 0xc8 <_Z7lcd_comh>
 1c0:	83 ed       	ldi	r24, 0xD3	; 211
 1c2:	90 e3       	ldi	r25, 0x30	; 48
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <_Z8lcd_initv+0x38>
	_delay_ms(5);
	lcd_clear();
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <_Z8lcd_initv+0x3e>
	lcd_com(0x06);   // сдвиг курсора вправо
 1ca:	00 00       	nop
 1cc:	d6 df       	rcall	.-84     	; 0x17a <_Z9lcd_clearv>
 1ce:	86 e0       	ldi	r24, 0x06	; 6
	lcd_com(0x0C);	 // включение дисплея
 1d0:	7b df       	rcall	.-266    	; 0xc8 <_Z7lcd_comh>
 1d2:	8c e0       	ldi	r24, 0x0C	; 12
 1d4:	79 cf       	rjmp	.-270    	; 0xc8 <_Z7lcd_comh>
 1d6:	08 95       	ret

000001d8 <_Z5go_tocc>:
}

//Функция перевода курсора на строку line и позицию pos
void go_to(char pos, char line)
{
	char addr = 0x40 * line + pos;
 1d8:	90 e4       	ldi	r25, 0x40	; 64
 1da:	69 9f       	mul	r22, r25
 1dc:	80 0d       	add	r24, r0
 1de:	11 24       	eor	r1, r1
	addr |= 0x80;
	lcd_com(addr);
 1e0:	80 68       	ori	r24, 0x80	; 128
 1e2:	72 cf       	rjmp	.-284    	; 0xc8 <_Z7lcd_comh>
 1e4:	08 95       	ret

000001e6 <_Z9lcd_arrayccPKc>:
}

//Функция вывода строки на LCD, начиная с координат X и Y
void lcd_array( char x, char y, const char *str )
{
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ea 01       	movw	r28, r20
	go_to(x,y);
 1ec:	f5 df       	rcall	.-22     	; 0x1d8 <_Z5go_tocc>
	while( *str )			//цикл пока указатель существует
 1ee:	88 81       	ld	r24, Y
 1f0:	88 23       	and	r24, r24
 1f2:	29 f0       	breq	.+10     	; 0x1fe <_Z9lcd_arrayccPKc+0x18>
	lcd_dat( *str++ );	//выводить строку
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	98 df       	rcall	.-208    	; 0x128 <_Z7lcd_dath>

//Функция вывода строки на LCD, начиная с координат X и Y
void lcd_array( char x, char y, const char *str )
{
	go_to(x,y);
	while( *str )			//цикл пока указатель существует
 1f8:	89 91       	ld	r24, Y+
 1fa:	81 11       	cpse	r24, r1
 1fc:	fc cf       	rjmp	.-8      	; 0x1f6 <_Z9lcd_arrayccPKc+0x10>
	lcd_dat( *str++ );	//выводить строку
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <_Z8read_adch>:
}

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input)
{
	ADMUX=adc_input | ADC_VREF_TYPE;
 204:	80 64       	ori	r24, 0x40	; 64
 206:	87 b9       	out	0x07, r24	; 7
 208:	87 ea       	ldi	r24, 0xA7	; 167
 20a:	91 e6       	ldi	r25, 0x61	; 97
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <_Z8read_adch+0x8>
 210:	00 c0       	rjmp	.+0      	; 0x212 <_Z8read_adch+0xe>
 212:	00 00       	nop
	// Delay needed for the stabilization of the ADC input voltage
	_delay_ms(10);
	// Start the AD conversion
	ADCSRA|=(1<<ADSC);
 214:	36 9a       	sbi	0x06, 6	; 6
	// Wait for the AD conversion to complete
	while ((ADCSRA & (1<<ADIF))==0);
 216:	34 9b       	sbis	0x06, 4	; 6
 218:	fe cf       	rjmp	.-4      	; 0x216 <_Z8read_adch+0x12>
	ADCSRA|=(1<<ADIF);
 21a:	34 9a       	sbi	0x06, 4	; 6
	return ADCW;
 21c:	84 b1       	in	r24, 0x04	; 4
 21e:	95 b1       	in	r25, 0x05	; 5
}
 220:	08 95       	ret

00000222 <_Z8adc_inith>:

// PIN - номер порта F от 0 до 7
void adc_init(uint8_t PIN) {
	DDRF &= ~(1<<PIN); // вывод PF с номером PIN настроить на ввод
 222:	e1 e6       	ldi	r30, 0x61	; 97
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	90 81       	ld	r25, Z
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	08 2e       	mov	r0, r24
 22e:	02 c0       	rjmp	.+4      	; 0x234 <_Z8adc_inith+0x12>
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <_Z8adc_inith+0xe>
 238:	20 95       	com	r18
 23a:	29 23       	and	r18, r25
 23c:	20 83       	st	Z, r18
	// левое смещение, 8 битный АЦП
	// устанавливаем источник АЦП пин с номером PIN
	ADMUX |= (0<<REFS1) | (1<<REFS0) |(1<<ADLAR) | (PIN<<MUX0);
 23e:	97 b1       	in	r25, 0x07	; 7
 240:	90 66       	ori	r25, 0x60	; 96
 242:	89 2b       	or	r24, r25
 244:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN) | // разрешение работы АЦП
	(1<<ADSC) | // запуск АЦП
	(1<<ADFR) | // автоматический режим АЦП
	(1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 246:	86 b1       	in	r24, 0x06	; 6
 248:	87 6e       	ori	r24, 0xE7	; 231
 24a:	86 b9       	out	0x06, r24	; 6
 24c:	08 95       	ret

0000024e <main>:
int speed = 7;				//Скорость движения точки

//------------------------------------------------------------------------------------------------------------------

int main(void)
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	00 d0       	rcall	.+0      	; 0x254 <main+0x6>
 254:	00 d0       	rcall	.+0      	; 0x256 <main+0x8>
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
	ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
	SFIOR=(0<<ACME);*/
	
	//Настройка портов
	
	DDRC = 0xFF;	//Порт C - выход (подключен LCD дисплей)
 25a:	2f ef       	ldi	r18, 0xFF	; 255
 25c:	24 bb       	out	0x14, r18	; 20
	PORTC = 0;
 25e:	15 ba       	out	0x15, r1	; 21
	
	lcd_init(); //Инициализация дисплея
 260:	95 df       	rcall	.-214    	; 0x18c <_Z8lcd_initv>
	
	// глобально запретим прерывания
	cli();
 262:	f8 94       	cli
	DDRA = 0x00; // порта А полностью на ввод
 264:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x00;
 266:	1b ba       	out	0x1b, r1	; 27
	
	// DDRB = 0xFF;
	DDRD = 0xFF;
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
 26c:	12 ba       	out	0x12, r1	; 18
	adc_init(3); // подключим АЦП к выводу PF3
 26e:	83 e0       	ldi	r24, 0x03	; 3
 270:	d8 df       	rcall	.-80     	; 0x222 <_Z8adc_inith>
	// глобально разрешим прерывания
	sei();
 272:	78 94       	sei
	uint8_t data;
	
	bool screen_for_temp = true;
	bool sreen_for_ust = false;
	uint8_t ust = 30;
 274:	0f 2e       	mov	r0, r31
 276:	fe e1       	ldi	r31, 0x1E	; 30
 278:	cf 2e       	mov	r12, r31
 27a:	f0 2d       	mov	r31, r0
	// глобально разрешим прерывания
	sei();
	uint8_t data;
	
	bool screen_for_temp = true;
	bool sreen_for_ust = false;
 27c:	31 2c       	mov	r3, r1
	adc_init(3); // подключим АЦП к выводу PF3
	// глобально разрешим прерывания
	sei();
	uint8_t data;
	
	bool screen_for_temp = true;
 27e:	88 24       	eor	r8, r8
 280:	83 94       	inc	r8
	bool sreen_for_ust = false;
	uint8_t ust = 30;
	
	while (1) {
		int dat = read_adc(3);
		float datADC = 1023 - dat;
 282:	0f 2e       	mov	r0, r31
 284:	44 24       	eor	r4, r4
 286:	4a 94       	dec	r4
 288:	f3 e0       	ldi	r31, 0x03	; 3
 28a:	5f 2e       	mov	r5, r31
 28c:	f0 2d       	mov	r31, r0
		dat = 115 - dat/10.8;
		
		if (PINA & (1<<0)) {
			sreen_for_ust = true;
 28e:	99 24       	eor	r9, r9
 290:	93 94       	inc	r9
			screen_for_temp = false;
 292:	21 2c       	mov	r2, r1
		{
			upper_line[0] = 'T';
			upper_line[1] = 'E';
			upper_line[2] = 'M';
			upper_line[3] = 'P';
			upper_line[4] = ' ';
 294:	68 94       	set
 296:	dd 24       	eor	r13, r13
 298:	d5 f8       	bld	r13, 5
			upper_line[5] = '=';
			upper_line[6] = ' ';
			upper_line[7] = dat/100+0x30;
			upper_line[8] = (dat/10)%10+0x30; //1024/1000=10.24/10=24
 29a:	0f 2e       	mov	r0, r31
 29c:	fa e0       	ldi	r31, 0x0A	; 10
 29e:	6f 2e       	mov	r6, r31
 2a0:	71 2c       	mov	r7, r1
 2a2:	f0 2d       	mov	r31, r0
			upper_line[8] = ust%10+0x30;
			upper_line[9] = ' ';
		}
		
		
		lower_line[0] = ' ';
 2a4:	00 e0       	ldi	r16, 0x00	; 0
	bool screen_for_temp = true;
	bool sreen_for_ust = false;
	uint8_t ust = 30;
	
	while (1) {
		int dat = read_adc(3);
 2a6:	11 e0       	ldi	r17, 0x01	; 1
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	ac df       	rcall	.-168    	; 0x204 <_Z8read_adch>
 2ac:	5c 01       	movw	r10, r24
		float datADC = 1023 - dat;
 2ae:	72 01       	movw	r14, r4
 2b0:	e8 1a       	sub	r14, r24
 2b2:	f9 0a       	sbc	r15, r25
 2b4:	b7 01       	movw	r22, r14
 2b6:	0f 2c       	mov	r0, r15
 2b8:	00 0c       	add	r0, r0
 2ba:	88 0b       	sbc	r24, r24
 2bc:	99 0b       	sbc	r25, r25
 2be:	c8 d1       	rcall	.+912    	; 0x650 <__floatsisf>
 2c0:	69 83       	std	Y+1, r22	; 0x01
 2c2:	7a 83       	std	Y+2, r23	; 0x02
 2c4:	8b 83       	std	Y+3, r24	; 0x03
 2c6:	9c 83       	std	Y+4, r25	; 0x04
		dat = 115 - dat/10.8;
		
		if (PINA & (1<<0)) {
 2c8:	c8 9b       	sbis	0x19, 0	; 25
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <main+0x82>
			sreen_for_ust = true;
 2cc:	39 2c       	mov	r3, r9
			screen_for_temp = false;
 2ce:	82 2c       	mov	r8, r2
		};
		
		if (PINA & (1<<1)) {
 2d0:	c9 9b       	sbis	0x19, 1	; 25
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <main+0x8a>
			sreen_for_ust = false;
 2d4:	32 2c       	mov	r3, r2
			screen_for_temp = true;
 2d6:	89 2c       	mov	r8, r9
		};
		
		if (PINA & (1<<2)) {
 2d8:	ca 99       	sbic	0x19, 2	; 25
			ust = ust + 1;
 2da:	c3 94       	inc	r12
		};
		
		if (PINA & (1<<3)) {
 2dc:	cb 99       	sbic	0x19, 3	; 25
			ust = ust - 1;
 2de:	ca 94       	dec	r12
		};
		
		if (screen_for_temp)
 2e0:	88 20       	and	r8, r8
 2e2:	09 f4       	brne	.+2      	; 0x2e6 <main+0x98>
 2e4:	3b c0       	rjmp	.+118    	; 0x35c <main+0x10e>
	uint8_t ust = 30;
	
	while (1) {
		int dat = read_adc(3);
		float datADC = 1023 - dat;
		dat = 115 - dat/10.8;
 2e6:	b5 01       	movw	r22, r10
 2e8:	bb 0c       	add	r11, r11
 2ea:	88 0b       	sbc	r24, r24
 2ec:	99 0b       	sbc	r25, r25
 2ee:	b0 d1       	rcall	.+864    	; 0x650 <__floatsisf>
 2f0:	2d ec       	ldi	r18, 0xCD	; 205
 2f2:	3c ec       	ldi	r19, 0xCC	; 204
 2f4:	4c e2       	ldi	r20, 0x2C	; 44
 2f6:	51 e4       	ldi	r21, 0x41	; 65
 2f8:	10 d1       	rcall	.+544    	; 0x51a <__divsf3>
 2fa:	9b 01       	movw	r18, r22
 2fc:	ac 01       	movw	r20, r24
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	86 ee       	ldi	r24, 0xE6	; 230
 304:	92 e4       	ldi	r25, 0x42	; 66
 306:	a4 d0       	rcall	.+328    	; 0x450 <__subsf3>
 308:	70 d1       	rcall	.+736    	; 0x5ea <__fixsfsi>
 30a:	9b 01       	movw	r18, r22
			ust = ust - 1;
		};
		
		if (screen_for_temp)
		{
			upper_line[0] = 'T';
 30c:	84 e5       	ldi	r24, 0x54	; 84
 30e:	e1 e1       	ldi	r30, 0x11	; 17
 310:	f1 e0       	ldi	r31, 0x01	; 1
 312:	80 83       	st	Z, r24
			upper_line[1] = 'E';
 314:	95 e4       	ldi	r25, 0x45	; 69
 316:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <upper_line+0x1>
			upper_line[2] = 'M';
 31a:	ed e4       	ldi	r30, 0x4D	; 77
 31c:	e0 93 13 01 	sts	0x0113, r30	; 0x800113 <upper_line+0x2>
			upper_line[3] = 'P';
 320:	f0 e5       	ldi	r31, 0x50	; 80
 322:	f0 93 14 01 	sts	0x0114, r31	; 0x800114 <upper_line+0x3>
			upper_line[4] = ' ';
 326:	d0 92 15 01 	sts	0x0115, r13	; 0x800115 <upper_line+0x4>
			upper_line[5] = '=';
 32a:	8d e3       	ldi	r24, 0x3D	; 61
 32c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <upper_line+0x5>
			upper_line[6] = ' ';
 330:	d0 92 17 01 	sts	0x0117, r13	; 0x800117 <upper_line+0x6>
			upper_line[7] = dat/100+0x30;
 334:	c9 01       	movw	r24, r18
 336:	64 e6       	ldi	r22, 0x64	; 100
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	16 d2       	rcall	.+1068   	; 0x768 <__divmodhi4>
 33c:	60 5d       	subi	r22, 0xD0	; 208
			upper_line[8] = (dat/10)%10+0x30; //1024/1000=10.24/10=24
 33e:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <upper_line+0x7>
 342:	c9 01       	movw	r24, r18
 344:	b3 01       	movw	r22, r6
 346:	10 d2       	rcall	.+1056   	; 0x768 <__divmodhi4>
 348:	28 2f       	mov	r18, r24
 34a:	cb 01       	movw	r24, r22
 34c:	b3 01       	movw	r22, r6
 34e:	0c d2       	rcall	.+1048   	; 0x768 <__divmodhi4>
 350:	80 5d       	subi	r24, 0xD0	; 208
 352:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <upper_line+0x8>
			upper_line[9] = dat%10+0x30;
 356:	20 5d       	subi	r18, 0xD0	; 208
 358:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <upper_line+0x9>
		};
		 
		if (sreen_for_ust) {
 35c:	33 20       	and	r3, r3
 35e:	f1 f1       	breq	.+124    	; 0x3dc <main+0x18e>
			upper_line[0] = 'U';
 360:	85 e5       	ldi	r24, 0x55	; 85
 362:	e1 e1       	ldi	r30, 0x11	; 17
 364:	f1 e0       	ldi	r31, 0x01	; 1
 366:	80 83       	st	Z, r24
			upper_line[1] = 'S';
 368:	83 e5       	ldi	r24, 0x53	; 83
 36a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <upper_line+0x1>
			upper_line[2] = 'T';
 36e:	f4 e5       	ldi	r31, 0x54	; 84
 370:	f0 93 13 01 	sts	0x0113, r31	; 0x800113 <upper_line+0x2>
			upper_line[3] = ' ';
 374:	d0 92 14 01 	sts	0x0114, r13	; 0x800114 <upper_line+0x3>
			upper_line[4] = '=';
 378:	2d e3       	ldi	r18, 0x3D	; 61
 37a:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <upper_line+0x4>
			upper_line[5] = ' ';
 37e:	d0 92 16 01 	sts	0x0116, r13	; 0x800116 <upper_line+0x5>
			upper_line[6] = ust/100+0x30;
 382:	89 e2       	ldi	r24, 0x29	; 41
 384:	c8 9e       	mul	r12, r24
 386:	81 2d       	mov	r24, r1
 388:	11 24       	eor	r1, r1
 38a:	82 95       	swap	r24
 38c:	8f 70       	andi	r24, 0x0F	; 15
 38e:	80 5d       	subi	r24, 0xD0	; 208
 390:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <upper_line+0x6>
			upper_line[7] = (ust/10)%10+0x30; //1024/1000=10.24/10=24
 394:	8d ec       	ldi	r24, 0xCD	; 205
 396:	c8 9e       	mul	r12, r24
 398:	91 2d       	mov	r25, r1
 39a:	11 24       	eor	r1, r1
 39c:	96 95       	lsr	r25
 39e:	96 95       	lsr	r25
 3a0:	96 95       	lsr	r25
 3a2:	98 9f       	mul	r25, r24
 3a4:	81 2d       	mov	r24, r1
 3a6:	11 24       	eor	r1, r1
 3a8:	86 95       	lsr	r24
 3aa:	86 95       	lsr	r24
 3ac:	86 95       	lsr	r24
 3ae:	88 0f       	add	r24, r24
 3b0:	28 2f       	mov	r18, r24
 3b2:	22 0f       	add	r18, r18
 3b4:	22 0f       	add	r18, r18
 3b6:	82 0f       	add	r24, r18
 3b8:	e9 2f       	mov	r30, r25
 3ba:	e8 1b       	sub	r30, r24
 3bc:	8e 2f       	mov	r24, r30
 3be:	80 5d       	subi	r24, 0xD0	; 208
 3c0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <upper_line+0x7>
			upper_line[8] = ust%10+0x30;
 3c4:	99 0f       	add	r25, r25
 3c6:	89 2f       	mov	r24, r25
 3c8:	88 0f       	add	r24, r24
 3ca:	88 0f       	add	r24, r24
 3cc:	98 0f       	add	r25, r24
 3ce:	8c 2d       	mov	r24, r12
 3d0:	89 1b       	sub	r24, r25
 3d2:	80 5d       	subi	r24, 0xD0	; 208
 3d4:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <upper_line+0x8>
			upper_line[9] = ' ';
 3d8:	d0 92 1a 01 	sts	0x011A, r13	; 0x80011a <upper_line+0x9>
		}
		
		
		lower_line[0] = ' ';
 3dc:	f8 01       	movw	r30, r16
		lower_line[1] = datADC/1000+0x30;
 3de:	d0 82       	st	Z, r13
 3e0:	20 e0       	ldi	r18, 0x00	; 0
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	4a e7       	ldi	r20, 0x7A	; 122
 3e6:	54 e4       	ldi	r21, 0x44	; 68
 3e8:	69 81       	ldd	r22, Y+1	; 0x01
 3ea:	7a 81       	ldd	r23, Y+2	; 0x02
 3ec:	8b 81       	ldd	r24, Y+3	; 0x03
 3ee:	9c 81       	ldd	r25, Y+4	; 0x04
 3f0:	94 d0       	rcall	.+296    	; 0x51a <__divsf3>
 3f2:	20 e0       	ldi	r18, 0x00	; 0
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	40 e4       	ldi	r20, 0x40	; 64
 3f8:	52 e4       	ldi	r21, 0x42	; 66
 3fa:	2b d0       	rcall	.+86     	; 0x452 <__addsf3>
 3fc:	fb d0       	rcall	.+502    	; 0x5f4 <__fixunssfsi>
		lower_line[2] = ((int)datADC/100)%10+0x30;
 3fe:	f8 01       	movw	r30, r16
 400:	61 83       	std	Z+1, r22	; 0x01
 402:	c7 01       	movw	r24, r14
 404:	64 e6       	ldi	r22, 0x64	; 100
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	af d1       	rcall	.+862    	; 0x768 <__divmodhi4>
 40a:	cb 01       	movw	r24, r22
 40c:	b3 01       	movw	r22, r6
 40e:	ac d1       	rcall	.+856    	; 0x768 <__divmodhi4>
 410:	80 5d       	subi	r24, 0xD0	; 208
		lower_line[3] = ((int)datADC/10)%10+0x30;//%10+0x30;
 412:	82 83       	std	Z+2, r24	; 0x02
 414:	c7 01       	movw	r24, r14
 416:	b3 01       	movw	r22, r6
 418:	a7 d1       	rcall	.+846    	; 0x768 <__divmodhi4>
 41a:	28 2f       	mov	r18, r24
 41c:	cb 01       	movw	r24, r22
 41e:	b3 01       	movw	r22, r6
 420:	a3 d1       	rcall	.+838    	; 0x768 <__divmodhi4>
 422:	80 5d       	subi	r24, 0xD0	; 208
 424:	83 83       	std	Z+3, r24	; 0x03
		lower_line[4] = ((int)datADC)%10+0x30;
 426:	20 5d       	subi	r18, 0xD0	; 208
 428:	24 83       	std	Z+4, r18	; 0x04
		
		lcd_array(1,0,upper_line);	//Вывод массива верхней строки на дисплей
 42a:	41 e1       	ldi	r20, 0x11	; 17
 42c:	51 e0       	ldi	r21, 0x01	; 1
 42e:	62 2d       	mov	r22, r2
 430:	89 2d       	mov	r24, r9
 432:	d9 de       	rcall	.-590    	; 0x1e6 <_Z9lcd_arrayccPKc>
 434:	a8 01       	movw	r20, r16
		lcd_array(0,1,lower_line);	//Вывод массива нижней строки на дисплей
 436:	69 2d       	mov	r22, r9
 438:	82 2d       	mov	r24, r2
 43a:	d5 de       	rcall	.-598    	; 0x1e6 <_Z9lcd_arrayccPKc>
 43c:	ff e3       	ldi	r31, 0x3F	; 63
 43e:	2d e0       	ldi	r18, 0x0D	; 13
 440:	83 e0       	ldi	r24, 0x03	; 3
 442:	f1 50       	subi	r31, 0x01	; 1
 444:	20 40       	sbci	r18, 0x00	; 0
 446:	80 40       	sbci	r24, 0x00	; 0
 448:	e1 f7       	brne	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44c:	00 00       	nop
 44e:	2c cf       	rjmp	.-424    	; 0x2a8 <main+0x5a>

00000450 <__subsf3>:
 450:	50 58       	subi	r21, 0x80	; 128

00000452 <__addsf3>:
 452:	bb 27       	eor	r27, r27
 454:	aa 27       	eor	r26, r26
 456:	0e d0       	rcall	.+28     	; 0x474 <__addsf3x>
 458:	4d c1       	rjmp	.+666    	; 0x6f4 <__fp_round>
 45a:	3e d1       	rcall	.+636    	; 0x6d8 <__fp_pscA>
 45c:	30 f0       	brcs	.+12     	; 0x46a <__addsf3+0x18>
 45e:	43 d1       	rcall	.+646    	; 0x6e6 <__fp_pscB>
 460:	20 f0       	brcs	.+8      	; 0x46a <__addsf3+0x18>
 462:	31 f4       	brne	.+12     	; 0x470 <__addsf3+0x1e>
 464:	9f 3f       	cpi	r25, 0xFF	; 255
 466:	11 f4       	brne	.+4      	; 0x46c <__addsf3+0x1a>
 468:	1e f4       	brtc	.+6      	; 0x470 <__addsf3+0x1e>
 46a:	33 c1       	rjmp	.+614    	; 0x6d2 <__fp_nan>
 46c:	0e f4       	brtc	.+2      	; 0x470 <__addsf3+0x1e>
 46e:	e0 95       	com	r30
 470:	e7 fb       	bst	r30, 7
 472:	29 c1       	rjmp	.+594    	; 0x6c6 <__fp_inf>

00000474 <__addsf3x>:
 474:	e9 2f       	mov	r30, r25
 476:	4f d1       	rcall	.+670    	; 0x716 <__fp_split3>
 478:	80 f3       	brcs	.-32     	; 0x45a <__addsf3+0x8>
 47a:	ba 17       	cp	r27, r26
 47c:	62 07       	cpc	r22, r18
 47e:	73 07       	cpc	r23, r19
 480:	84 07       	cpc	r24, r20
 482:	95 07       	cpc	r25, r21
 484:	18 f0       	brcs	.+6      	; 0x48c <__addsf3x+0x18>
 486:	71 f4       	brne	.+28     	; 0x4a4 <__addsf3x+0x30>
 488:	9e f5       	brtc	.+102    	; 0x4f0 <__addsf3x+0x7c>
 48a:	67 c1       	rjmp	.+718    	; 0x75a <__fp_zero>
 48c:	0e f4       	brtc	.+2      	; 0x490 <__addsf3x+0x1c>
 48e:	e0 95       	com	r30
 490:	0b 2e       	mov	r0, r27
 492:	ba 2f       	mov	r27, r26
 494:	a0 2d       	mov	r26, r0
 496:	0b 01       	movw	r0, r22
 498:	b9 01       	movw	r22, r18
 49a:	90 01       	movw	r18, r0
 49c:	0c 01       	movw	r0, r24
 49e:	ca 01       	movw	r24, r20
 4a0:	a0 01       	movw	r20, r0
 4a2:	11 24       	eor	r1, r1
 4a4:	ff 27       	eor	r31, r31
 4a6:	59 1b       	sub	r21, r25
 4a8:	99 f0       	breq	.+38     	; 0x4d0 <__addsf3x+0x5c>
 4aa:	59 3f       	cpi	r21, 0xF9	; 249
 4ac:	50 f4       	brcc	.+20     	; 0x4c2 <__addsf3x+0x4e>
 4ae:	50 3e       	cpi	r21, 0xE0	; 224
 4b0:	68 f1       	brcs	.+90     	; 0x50c <__addsf3x+0x98>
 4b2:	1a 16       	cp	r1, r26
 4b4:	f0 40       	sbci	r31, 0x00	; 0
 4b6:	a2 2f       	mov	r26, r18
 4b8:	23 2f       	mov	r18, r19
 4ba:	34 2f       	mov	r19, r20
 4bc:	44 27       	eor	r20, r20
 4be:	58 5f       	subi	r21, 0xF8	; 248
 4c0:	f3 cf       	rjmp	.-26     	; 0x4a8 <__addsf3x+0x34>
 4c2:	46 95       	lsr	r20
 4c4:	37 95       	ror	r19
 4c6:	27 95       	ror	r18
 4c8:	a7 95       	ror	r26
 4ca:	f0 40       	sbci	r31, 0x00	; 0
 4cc:	53 95       	inc	r21
 4ce:	c9 f7       	brne	.-14     	; 0x4c2 <__addsf3x+0x4e>
 4d0:	7e f4       	brtc	.+30     	; 0x4f0 <__addsf3x+0x7c>
 4d2:	1f 16       	cp	r1, r31
 4d4:	ba 0b       	sbc	r27, r26
 4d6:	62 0b       	sbc	r22, r18
 4d8:	73 0b       	sbc	r23, r19
 4da:	84 0b       	sbc	r24, r20
 4dc:	ba f0       	brmi	.+46     	; 0x50c <__addsf3x+0x98>
 4de:	91 50       	subi	r25, 0x01	; 1
 4e0:	a1 f0       	breq	.+40     	; 0x50a <__addsf3x+0x96>
 4e2:	ff 0f       	add	r31, r31
 4e4:	bb 1f       	adc	r27, r27
 4e6:	66 1f       	adc	r22, r22
 4e8:	77 1f       	adc	r23, r23
 4ea:	88 1f       	adc	r24, r24
 4ec:	c2 f7       	brpl	.-16     	; 0x4de <__addsf3x+0x6a>
 4ee:	0e c0       	rjmp	.+28     	; 0x50c <__addsf3x+0x98>
 4f0:	ba 0f       	add	r27, r26
 4f2:	62 1f       	adc	r22, r18
 4f4:	73 1f       	adc	r23, r19
 4f6:	84 1f       	adc	r24, r20
 4f8:	48 f4       	brcc	.+18     	; 0x50c <__addsf3x+0x98>
 4fa:	87 95       	ror	r24
 4fc:	77 95       	ror	r23
 4fe:	67 95       	ror	r22
 500:	b7 95       	ror	r27
 502:	f7 95       	ror	r31
 504:	9e 3f       	cpi	r25, 0xFE	; 254
 506:	08 f0       	brcs	.+2      	; 0x50a <__addsf3x+0x96>
 508:	b3 cf       	rjmp	.-154    	; 0x470 <__addsf3+0x1e>
 50a:	93 95       	inc	r25
 50c:	88 0f       	add	r24, r24
 50e:	08 f0       	brcs	.+2      	; 0x512 <__addsf3x+0x9e>
 510:	99 27       	eor	r25, r25
 512:	ee 0f       	add	r30, r30
 514:	97 95       	ror	r25
 516:	87 95       	ror	r24
 518:	08 95       	ret

0000051a <__divsf3>:
 51a:	0c d0       	rcall	.+24     	; 0x534 <__divsf3x>
 51c:	eb c0       	rjmp	.+470    	; 0x6f4 <__fp_round>
 51e:	e3 d0       	rcall	.+454    	; 0x6e6 <__fp_pscB>
 520:	40 f0       	brcs	.+16     	; 0x532 <__divsf3+0x18>
 522:	da d0       	rcall	.+436    	; 0x6d8 <__fp_pscA>
 524:	30 f0       	brcs	.+12     	; 0x532 <__divsf3+0x18>
 526:	21 f4       	brne	.+8      	; 0x530 <__divsf3+0x16>
 528:	5f 3f       	cpi	r21, 0xFF	; 255
 52a:	19 f0       	breq	.+6      	; 0x532 <__divsf3+0x18>
 52c:	cc c0       	rjmp	.+408    	; 0x6c6 <__fp_inf>
 52e:	51 11       	cpse	r21, r1
 530:	15 c1       	rjmp	.+554    	; 0x75c <__fp_szero>
 532:	cf c0       	rjmp	.+414    	; 0x6d2 <__fp_nan>

00000534 <__divsf3x>:
 534:	f0 d0       	rcall	.+480    	; 0x716 <__fp_split3>
 536:	98 f3       	brcs	.-26     	; 0x51e <__divsf3+0x4>

00000538 <__divsf3_pse>:
 538:	99 23       	and	r25, r25
 53a:	c9 f3       	breq	.-14     	; 0x52e <__divsf3+0x14>
 53c:	55 23       	and	r21, r21
 53e:	b1 f3       	breq	.-20     	; 0x52c <__divsf3+0x12>
 540:	95 1b       	sub	r25, r21
 542:	55 0b       	sbc	r21, r21
 544:	bb 27       	eor	r27, r27
 546:	aa 27       	eor	r26, r26
 548:	62 17       	cp	r22, r18
 54a:	73 07       	cpc	r23, r19
 54c:	84 07       	cpc	r24, r20
 54e:	38 f0       	brcs	.+14     	; 0x55e <__divsf3_pse+0x26>
 550:	9f 5f       	subi	r25, 0xFF	; 255
 552:	5f 4f       	sbci	r21, 0xFF	; 255
 554:	22 0f       	add	r18, r18
 556:	33 1f       	adc	r19, r19
 558:	44 1f       	adc	r20, r20
 55a:	aa 1f       	adc	r26, r26
 55c:	a9 f3       	breq	.-22     	; 0x548 <__divsf3_pse+0x10>
 55e:	33 d0       	rcall	.+102    	; 0x5c6 <__divsf3_pse+0x8e>
 560:	0e 2e       	mov	r0, r30
 562:	3a f0       	brmi	.+14     	; 0x572 <__divsf3_pse+0x3a>
 564:	e0 e8       	ldi	r30, 0x80	; 128
 566:	30 d0       	rcall	.+96     	; 0x5c8 <__divsf3_pse+0x90>
 568:	91 50       	subi	r25, 0x01	; 1
 56a:	50 40       	sbci	r21, 0x00	; 0
 56c:	e6 95       	lsr	r30
 56e:	00 1c       	adc	r0, r0
 570:	ca f7       	brpl	.-14     	; 0x564 <__divsf3_pse+0x2c>
 572:	29 d0       	rcall	.+82     	; 0x5c6 <__divsf3_pse+0x8e>
 574:	fe 2f       	mov	r31, r30
 576:	27 d0       	rcall	.+78     	; 0x5c6 <__divsf3_pse+0x8e>
 578:	66 0f       	add	r22, r22
 57a:	77 1f       	adc	r23, r23
 57c:	88 1f       	adc	r24, r24
 57e:	bb 1f       	adc	r27, r27
 580:	26 17       	cp	r18, r22
 582:	37 07       	cpc	r19, r23
 584:	48 07       	cpc	r20, r24
 586:	ab 07       	cpc	r26, r27
 588:	b0 e8       	ldi	r27, 0x80	; 128
 58a:	09 f0       	breq	.+2      	; 0x58e <__divsf3_pse+0x56>
 58c:	bb 0b       	sbc	r27, r27
 58e:	80 2d       	mov	r24, r0
 590:	bf 01       	movw	r22, r30
 592:	ff 27       	eor	r31, r31
 594:	93 58       	subi	r25, 0x83	; 131
 596:	5f 4f       	sbci	r21, 0xFF	; 255
 598:	2a f0       	brmi	.+10     	; 0x5a4 <__divsf3_pse+0x6c>
 59a:	9e 3f       	cpi	r25, 0xFE	; 254
 59c:	51 05       	cpc	r21, r1
 59e:	68 f0       	brcs	.+26     	; 0x5ba <__divsf3_pse+0x82>
 5a0:	92 c0       	rjmp	.+292    	; 0x6c6 <__fp_inf>
 5a2:	dc c0       	rjmp	.+440    	; 0x75c <__fp_szero>
 5a4:	5f 3f       	cpi	r21, 0xFF	; 255
 5a6:	ec f3       	brlt	.-6      	; 0x5a2 <__divsf3_pse+0x6a>
 5a8:	98 3e       	cpi	r25, 0xE8	; 232
 5aa:	dc f3       	brlt	.-10     	; 0x5a2 <__divsf3_pse+0x6a>
 5ac:	86 95       	lsr	r24
 5ae:	77 95       	ror	r23
 5b0:	67 95       	ror	r22
 5b2:	b7 95       	ror	r27
 5b4:	f7 95       	ror	r31
 5b6:	9f 5f       	subi	r25, 0xFF	; 255
 5b8:	c9 f7       	brne	.-14     	; 0x5ac <__divsf3_pse+0x74>
 5ba:	88 0f       	add	r24, r24
 5bc:	91 1d       	adc	r25, r1
 5be:	96 95       	lsr	r25
 5c0:	87 95       	ror	r24
 5c2:	97 f9       	bld	r25, 7
 5c4:	08 95       	ret
 5c6:	e1 e0       	ldi	r30, 0x01	; 1
 5c8:	66 0f       	add	r22, r22
 5ca:	77 1f       	adc	r23, r23
 5cc:	88 1f       	adc	r24, r24
 5ce:	bb 1f       	adc	r27, r27
 5d0:	62 17       	cp	r22, r18
 5d2:	73 07       	cpc	r23, r19
 5d4:	84 07       	cpc	r24, r20
 5d6:	ba 07       	cpc	r27, r26
 5d8:	20 f0       	brcs	.+8      	; 0x5e2 <__divsf3_pse+0xaa>
 5da:	62 1b       	sub	r22, r18
 5dc:	73 0b       	sbc	r23, r19
 5de:	84 0b       	sbc	r24, r20
 5e0:	ba 0b       	sbc	r27, r26
 5e2:	ee 1f       	adc	r30, r30
 5e4:	88 f7       	brcc	.-30     	; 0x5c8 <__divsf3_pse+0x90>
 5e6:	e0 95       	com	r30
 5e8:	08 95       	ret

000005ea <__fixsfsi>:
 5ea:	04 d0       	rcall	.+8      	; 0x5f4 <__fixunssfsi>
 5ec:	68 94       	set
 5ee:	b1 11       	cpse	r27, r1
 5f0:	b5 c0       	rjmp	.+362    	; 0x75c <__fp_szero>
 5f2:	08 95       	ret

000005f4 <__fixunssfsi>:
 5f4:	98 d0       	rcall	.+304    	; 0x726 <__fp_splitA>
 5f6:	88 f0       	brcs	.+34     	; 0x61a <__fixunssfsi+0x26>
 5f8:	9f 57       	subi	r25, 0x7F	; 127
 5fa:	90 f0       	brcs	.+36     	; 0x620 <__fixunssfsi+0x2c>
 5fc:	b9 2f       	mov	r27, r25
 5fe:	99 27       	eor	r25, r25
 600:	b7 51       	subi	r27, 0x17	; 23
 602:	a0 f0       	brcs	.+40     	; 0x62c <__fixunssfsi+0x38>
 604:	d1 f0       	breq	.+52     	; 0x63a <__fixunssfsi+0x46>
 606:	66 0f       	add	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	88 1f       	adc	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	1a f0       	brmi	.+6      	; 0x616 <__fixunssfsi+0x22>
 610:	ba 95       	dec	r27
 612:	c9 f7       	brne	.-14     	; 0x606 <__fixunssfsi+0x12>
 614:	12 c0       	rjmp	.+36     	; 0x63a <__fixunssfsi+0x46>
 616:	b1 30       	cpi	r27, 0x01	; 1
 618:	81 f0       	breq	.+32     	; 0x63a <__fixunssfsi+0x46>
 61a:	9f d0       	rcall	.+318    	; 0x75a <__fp_zero>
 61c:	b1 e0       	ldi	r27, 0x01	; 1
 61e:	08 95       	ret
 620:	9c c0       	rjmp	.+312    	; 0x75a <__fp_zero>
 622:	67 2f       	mov	r22, r23
 624:	78 2f       	mov	r23, r24
 626:	88 27       	eor	r24, r24
 628:	b8 5f       	subi	r27, 0xF8	; 248
 62a:	39 f0       	breq	.+14     	; 0x63a <__fixunssfsi+0x46>
 62c:	b9 3f       	cpi	r27, 0xF9	; 249
 62e:	cc f3       	brlt	.-14     	; 0x622 <__fixunssfsi+0x2e>
 630:	86 95       	lsr	r24
 632:	77 95       	ror	r23
 634:	67 95       	ror	r22
 636:	b3 95       	inc	r27
 638:	d9 f7       	brne	.-10     	; 0x630 <__fixunssfsi+0x3c>
 63a:	3e f4       	brtc	.+14     	; 0x64a <__fixunssfsi+0x56>
 63c:	90 95       	com	r25
 63e:	80 95       	com	r24
 640:	70 95       	com	r23
 642:	61 95       	neg	r22
 644:	7f 4f       	sbci	r23, 0xFF	; 255
 646:	8f 4f       	sbci	r24, 0xFF	; 255
 648:	9f 4f       	sbci	r25, 0xFF	; 255
 64a:	08 95       	ret

0000064c <__floatunsisf>:
 64c:	e8 94       	clt
 64e:	09 c0       	rjmp	.+18     	; 0x662 <__floatsisf+0x12>

00000650 <__floatsisf>:
 650:	97 fb       	bst	r25, 7
 652:	3e f4       	brtc	.+14     	; 0x662 <__floatsisf+0x12>
 654:	90 95       	com	r25
 656:	80 95       	com	r24
 658:	70 95       	com	r23
 65a:	61 95       	neg	r22
 65c:	7f 4f       	sbci	r23, 0xFF	; 255
 65e:	8f 4f       	sbci	r24, 0xFF	; 255
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	99 23       	and	r25, r25
 664:	a9 f0       	breq	.+42     	; 0x690 <__floatsisf+0x40>
 666:	f9 2f       	mov	r31, r25
 668:	96 e9       	ldi	r25, 0x96	; 150
 66a:	bb 27       	eor	r27, r27
 66c:	93 95       	inc	r25
 66e:	f6 95       	lsr	r31
 670:	87 95       	ror	r24
 672:	77 95       	ror	r23
 674:	67 95       	ror	r22
 676:	b7 95       	ror	r27
 678:	f1 11       	cpse	r31, r1
 67a:	f8 cf       	rjmp	.-16     	; 0x66c <__floatsisf+0x1c>
 67c:	fa f4       	brpl	.+62     	; 0x6bc <__floatsisf+0x6c>
 67e:	bb 0f       	add	r27, r27
 680:	11 f4       	brne	.+4      	; 0x686 <__floatsisf+0x36>
 682:	60 ff       	sbrs	r22, 0
 684:	1b c0       	rjmp	.+54     	; 0x6bc <__floatsisf+0x6c>
 686:	6f 5f       	subi	r22, 0xFF	; 255
 688:	7f 4f       	sbci	r23, 0xFF	; 255
 68a:	8f 4f       	sbci	r24, 0xFF	; 255
 68c:	9f 4f       	sbci	r25, 0xFF	; 255
 68e:	16 c0       	rjmp	.+44     	; 0x6bc <__floatsisf+0x6c>
 690:	88 23       	and	r24, r24
 692:	11 f0       	breq	.+4      	; 0x698 <__floatsisf+0x48>
 694:	96 e9       	ldi	r25, 0x96	; 150
 696:	11 c0       	rjmp	.+34     	; 0x6ba <__floatsisf+0x6a>
 698:	77 23       	and	r23, r23
 69a:	21 f0       	breq	.+8      	; 0x6a4 <__floatsisf+0x54>
 69c:	9e e8       	ldi	r25, 0x8E	; 142
 69e:	87 2f       	mov	r24, r23
 6a0:	76 2f       	mov	r23, r22
 6a2:	05 c0       	rjmp	.+10     	; 0x6ae <__floatsisf+0x5e>
 6a4:	66 23       	and	r22, r22
 6a6:	71 f0       	breq	.+28     	; 0x6c4 <__floatsisf+0x74>
 6a8:	96 e8       	ldi	r25, 0x86	; 134
 6aa:	86 2f       	mov	r24, r22
 6ac:	70 e0       	ldi	r23, 0x00	; 0
 6ae:	60 e0       	ldi	r22, 0x00	; 0
 6b0:	2a f0       	brmi	.+10     	; 0x6bc <__floatsisf+0x6c>
 6b2:	9a 95       	dec	r25
 6b4:	66 0f       	add	r22, r22
 6b6:	77 1f       	adc	r23, r23
 6b8:	88 1f       	adc	r24, r24
 6ba:	da f7       	brpl	.-10     	; 0x6b2 <__floatsisf+0x62>
 6bc:	88 0f       	add	r24, r24
 6be:	96 95       	lsr	r25
 6c0:	87 95       	ror	r24
 6c2:	97 f9       	bld	r25, 7
 6c4:	08 95       	ret

000006c6 <__fp_inf>:
 6c6:	97 f9       	bld	r25, 7
 6c8:	9f 67       	ori	r25, 0x7F	; 127
 6ca:	80 e8       	ldi	r24, 0x80	; 128
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	60 e0       	ldi	r22, 0x00	; 0
 6d0:	08 95       	ret

000006d2 <__fp_nan>:
 6d2:	9f ef       	ldi	r25, 0xFF	; 255
 6d4:	80 ec       	ldi	r24, 0xC0	; 192
 6d6:	08 95       	ret

000006d8 <__fp_pscA>:
 6d8:	00 24       	eor	r0, r0
 6da:	0a 94       	dec	r0
 6dc:	16 16       	cp	r1, r22
 6de:	17 06       	cpc	r1, r23
 6e0:	18 06       	cpc	r1, r24
 6e2:	09 06       	cpc	r0, r25
 6e4:	08 95       	ret

000006e6 <__fp_pscB>:
 6e6:	00 24       	eor	r0, r0
 6e8:	0a 94       	dec	r0
 6ea:	12 16       	cp	r1, r18
 6ec:	13 06       	cpc	r1, r19
 6ee:	14 06       	cpc	r1, r20
 6f0:	05 06       	cpc	r0, r21
 6f2:	08 95       	ret

000006f4 <__fp_round>:
 6f4:	09 2e       	mov	r0, r25
 6f6:	03 94       	inc	r0
 6f8:	00 0c       	add	r0, r0
 6fa:	11 f4       	brne	.+4      	; 0x700 <__fp_round+0xc>
 6fc:	88 23       	and	r24, r24
 6fe:	52 f0       	brmi	.+20     	; 0x714 <__fp_round+0x20>
 700:	bb 0f       	add	r27, r27
 702:	40 f4       	brcc	.+16     	; 0x714 <__fp_round+0x20>
 704:	bf 2b       	or	r27, r31
 706:	11 f4       	brne	.+4      	; 0x70c <__fp_round+0x18>
 708:	60 ff       	sbrs	r22, 0
 70a:	04 c0       	rjmp	.+8      	; 0x714 <__fp_round+0x20>
 70c:	6f 5f       	subi	r22, 0xFF	; 255
 70e:	7f 4f       	sbci	r23, 0xFF	; 255
 710:	8f 4f       	sbci	r24, 0xFF	; 255
 712:	9f 4f       	sbci	r25, 0xFF	; 255
 714:	08 95       	ret

00000716 <__fp_split3>:
 716:	57 fd       	sbrc	r21, 7
 718:	90 58       	subi	r25, 0x80	; 128
 71a:	44 0f       	add	r20, r20
 71c:	55 1f       	adc	r21, r21
 71e:	59 f0       	breq	.+22     	; 0x736 <__fp_splitA+0x10>
 720:	5f 3f       	cpi	r21, 0xFF	; 255
 722:	71 f0       	breq	.+28     	; 0x740 <__fp_splitA+0x1a>
 724:	47 95       	ror	r20

00000726 <__fp_splitA>:
 726:	88 0f       	add	r24, r24
 728:	97 fb       	bst	r25, 7
 72a:	99 1f       	adc	r25, r25
 72c:	61 f0       	breq	.+24     	; 0x746 <__fp_splitA+0x20>
 72e:	9f 3f       	cpi	r25, 0xFF	; 255
 730:	79 f0       	breq	.+30     	; 0x750 <__fp_splitA+0x2a>
 732:	87 95       	ror	r24
 734:	08 95       	ret
 736:	12 16       	cp	r1, r18
 738:	13 06       	cpc	r1, r19
 73a:	14 06       	cpc	r1, r20
 73c:	55 1f       	adc	r21, r21
 73e:	f2 cf       	rjmp	.-28     	; 0x724 <__fp_split3+0xe>
 740:	46 95       	lsr	r20
 742:	f1 df       	rcall	.-30     	; 0x726 <__fp_splitA>
 744:	08 c0       	rjmp	.+16     	; 0x756 <__fp_splitA+0x30>
 746:	16 16       	cp	r1, r22
 748:	17 06       	cpc	r1, r23
 74a:	18 06       	cpc	r1, r24
 74c:	99 1f       	adc	r25, r25
 74e:	f1 cf       	rjmp	.-30     	; 0x732 <__fp_splitA+0xc>
 750:	86 95       	lsr	r24
 752:	71 05       	cpc	r23, r1
 754:	61 05       	cpc	r22, r1
 756:	08 94       	sec
 758:	08 95       	ret

0000075a <__fp_zero>:
 75a:	e8 94       	clt

0000075c <__fp_szero>:
 75c:	bb 27       	eor	r27, r27
 75e:	66 27       	eor	r22, r22
 760:	77 27       	eor	r23, r23
 762:	cb 01       	movw	r24, r22
 764:	97 f9       	bld	r25, 7
 766:	08 95       	ret

00000768 <__divmodhi4>:
 768:	97 fb       	bst	r25, 7
 76a:	07 2e       	mov	r0, r23
 76c:	16 f4       	brtc	.+4      	; 0x772 <__divmodhi4+0xa>
 76e:	00 94       	com	r0
 770:	06 d0       	rcall	.+12     	; 0x77e <__divmodhi4_neg1>
 772:	77 fd       	sbrc	r23, 7
 774:	08 d0       	rcall	.+16     	; 0x786 <__divmodhi4_neg2>
 776:	0b d0       	rcall	.+22     	; 0x78e <__udivmodhi4>
 778:	07 fc       	sbrc	r0, 7
 77a:	05 d0       	rcall	.+10     	; 0x786 <__divmodhi4_neg2>
 77c:	3e f4       	brtc	.+14     	; 0x78c <__divmodhi4_exit>

0000077e <__divmodhi4_neg1>:
 77e:	90 95       	com	r25
 780:	81 95       	neg	r24
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	08 95       	ret

00000786 <__divmodhi4_neg2>:
 786:	70 95       	com	r23
 788:	61 95       	neg	r22
 78a:	7f 4f       	sbci	r23, 0xFF	; 255

0000078c <__divmodhi4_exit>:
 78c:	08 95       	ret

0000078e <__udivmodhi4>:
 78e:	aa 1b       	sub	r26, r26
 790:	bb 1b       	sub	r27, r27
 792:	51 e1       	ldi	r21, 0x11	; 17
 794:	07 c0       	rjmp	.+14     	; 0x7a4 <__udivmodhi4_ep>

00000796 <__udivmodhi4_loop>:
 796:	aa 1f       	adc	r26, r26
 798:	bb 1f       	adc	r27, r27
 79a:	a6 17       	cp	r26, r22
 79c:	b7 07       	cpc	r27, r23
 79e:	10 f0       	brcs	.+4      	; 0x7a4 <__udivmodhi4_ep>
 7a0:	a6 1b       	sub	r26, r22
 7a2:	b7 0b       	sbc	r27, r23

000007a4 <__udivmodhi4_ep>:
 7a4:	88 1f       	adc	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	5a 95       	dec	r21
 7aa:	a9 f7       	brne	.-22     	; 0x796 <__udivmodhi4_loop>
 7ac:	80 95       	com	r24
 7ae:	90 95       	com	r25
 7b0:	bc 01       	movw	r22, r24
 7b2:	cd 01       	movw	r24, r26
 7b4:	08 95       	ret

000007b6 <_exit>:
 7b6:	f8 94       	cli

000007b8 <__stop_program>:
 7b8:	ff cf       	rjmp	.-2      	; 0x7b8 <__stop_program>
